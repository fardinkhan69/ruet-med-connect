
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wtbaxzeuhscpsebwpzcw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind0YmF4emV1aHNjcHNlYndwemN3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4NzEyMzYsImV4cCI6MjA1OTQ0NzIzNn0.tdPNYC5gbzmlZn-U4jS82z2i7K-f_PJZF-Zyyk06Q_k";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storageKey: 'docapp-auth-token',
      detectSessionInUrl: true,
      flowType: 'implicit'
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    },
    global: {
      headers: {
        'x-application-name': 'doctor-appointment-app'
      }
    }
  }
);

/**
 * Enhanced logging function for Supabase operations
 * Accepts any type of query, including Supabase builder objects and Promises
 */
export const logSupabaseOperation = async <T>(operation: string, query: any): Promise<T> => {
  try {
    console.log(`Starting Supabase operation: ${operation}`);
    
    // Execute the query
    let result;
    
    // Handle both Promise objects and Supabase query builders
    if (query instanceof Promise) {
      result = await query;
    } else if (query && typeof query.then === 'function') {
      // For Supabase query builders which are "thenable" but not actual Promises
      result = await query;
    } else if (query && typeof query === 'object') {
      // Handle direct objects
      result = query;
    } else {
      throw new Error(`Invalid query object for operation: ${operation}`);
    }
    
    console.log(`Supabase ${operation} result:`, result);
    
    if (result?.error) {
      console.error(`Supabase ${operation} error:`, result.error);
    }
    
    return result;
  } catch (err) {
    console.error(`Unexpected error in Supabase ${operation}:`, err);
    throw err;
  }
};

// Test function to verify Supabase connection
export const testSupabaseConnection = async () => {
  try {
    const { data, error } = await supabase.from('doctors').select('*').limit(1);
    if (error) {
      console.error('Supabase connection test failed:', error);
      return { success: false, error };
    }
    console.log('Supabase connection test succeeded:', data);
    return { success: true, data };
  } catch (err) {
    console.error('Unexpected error testing Supabase connection:', err);
    return { success: false, error: err };
  }
};
